// Generated by CoffeeScript 1.3.3
(function() {
  var Tags;

  Tags = (function() {

    function Tags(client) {
      this.client = client;
    }

    Tags.prototype.responseHandler = function(errMessage, callback) {
      if (errMessage == null) {
        errMessage = 'Error';
      }
      return function(err, statusCode, responseBody) {
        if (err) {
          return callback(err);
        }
        if (statusCode !== 200) {
          return callback(new Error(errMessage));
        } else {
          return callback(null, responseBody);
        }
      };
    };

    Tags.prototype.get = function(options, callback) {
      if ((options != null ? options.id : void 0) == null) {
        return;
      }
      return this.client.get("/tags/" + options.id, {}, this.responseHandler("Tag get error", callback));
    };

    Tags.prototype.children = function(id, callback) {
      if ((typeof options !== "undefined" && options !== null ? options.id : void 0) == null) {
        return callback(new Error('id parameter not present'));
      }
      return this.client.get("/tags/" + options.id + "/children", {}, this.responseHandler("Tag children get error", callback));
    };

    Tags.prototype.parents = function(id, callback) {
      if ((typeof options !== "undefined" && options !== null ? options.id : void 0) == null) {
        return callback(new Error('id parameter not present'));
      }
      return this.client.get("/tags/" + options.id + "/parents", {}, this.responseHandler("Tag parent get error", callback));
    };

    Tags.prototype.startups = function(options, callback) {
      if ((options != null ? options.id : void 0) == null) {
        return callback(new Error('id parameter not present'));
      }
      return this.client.get("/tags/" + options.id + "/startups", options, this.responseHandler("Tag parent get error", callback));
    };

    Tags.prototype.users = function(options, callback) {
      if ((options != null ? options.id : void 0) == null) {
        return callback(new Error('id parameter not present'));
      }
      return this.client.get("/tags/" + options.id + "/users", options, this.responseHandler("Tag users get error", callback));
    };

    return Tags;

  })();

  module.exports = Tags;

}).call(this);
