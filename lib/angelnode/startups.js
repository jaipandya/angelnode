// Generated by CoffeeScript 1.3.3
(function() {
  var Startups;

  Startups = (function() {

    function Startups(client) {
      this.client = client;
    }

    Startups.prototype.responseHandler = function(errMessage, callback) {
      if (errMessage == null) {
        errMessage = 'Error';
      }
      return function(err, statusCode, responseBody) {
        if (err) {
          return callback(err);
        }
        if (statusCode !== 200) {
          return callback(new Error(errMessage));
        } else {
          return callback(null, responseBody);
        }
      };
    };

    Startups.prototype.get = function(options, callback) {
      if ((options != null ? options.id : void 0) == null) {
        return;
      }
      if (typeof options.id === "Array") {
        return this.client.get("/startups/batch", {
          "ids": options.id.join(",")
        }, this.responseHandler("Startups batch get error", callback));
      } else {
        return this.client.get("/startups/" + options.id, {}, this.responseHandler("Startups get error", callback));
      }
    };

    Startups.prototype.comments = function(options, callback) {
      if ((options != null ? options.id : void 0) == null) {
        return;
      }
      return this.client.get("/startups/" + options.id + "/comments", {}, this.responseHandler("Startups comments get error", callback));
    };

    Startups.prototype.users = function(options, callback) {
      if ((options != null ? options.id : void 0) == null) {
        return;
      }
      return this.client.get("/startups/" + options.id + "/users", {}, this.responseHandler("Startups users get error", callback));
    };

    Startups.prototype.search = function(options, callback) {
      if (!((options != null) && ((options.slug != null) || (options.domain != null)))) {
        return callback(new Error('No search parameter specified'));
      }
      return this.client.get("/startups/search", options, this.responseHandler("Startups search get error", callback));
    };

    return Startups;

  })();

  module.exports = Startups;

}).call(this);
