// Generated by CoffeeScript 1.3.3
(function() {
  var ActivityFeeds, Client, Follows, Jobs, Messages, Paths, Press, Reviews, Search, StartupRoles, Startups, StatusUpdates, Tags, Users, config, request;

  request = require('request');

  config = require('config');

  ActivityFeeds = require('./activity_feeds');

  Follows = require('./follows');

  Jobs = require('./jobs');

  Messages = require('./messages');

  Paths = require('./paths');

  Press = require('./press');

  Reviews = require('./reviews');

  Search = require('./search');

  StartupRoles = require('./startup_roles');

  Startups = require('./startups');

  StatusUpdates = require('./status_updates');

  Tags = require('./tags');

  Users = require('./users');

  Client = (function() {

    function Client(token) {
      this.token = token;
    }

    Client.prototype.activityFeeds = function() {
      return new ActivityFeeds(this);
    };

    Client.prototype.follows = function() {
      return new Follows(this);
    };

    Client.prototype.jobs = function() {
      return new Jobs(this);
    };

    Client.prototype.messages = function() {
      return new Messages(this);
    };

    Client.prototype.paths = function() {
      return new Paths(this);
    };

    Client.prototype.press = function() {
      return new Press(this);
    };

    Client.prototype.reviews = function() {
      return new Reviews(this);
    };

    Client.prototype.search = function() {
      return new Search(this);
    };

    Client.prototype.startupRoles = function() {
      return new StartupRoles(this);
    };

    Client.prototype.startups = function() {
      return new Startups(this);
    };

    Client.prototype.statusUpdates = function() {
      return new StatusUpdates(this);
    };

    Client.prototype.tags = function() {
      return new Tags(this);
    };

    Client.prototype.users = function() {
      return new Users(this);
    };

    Client.prototype.query = function(path) {
      if (path == null) {
        path = '/';
      }
      if (path[0] !== '/') {
        path = '/' + path;
      }
      uri += config.apiBaseUrl + path;
      if (typeof this.token === 'string') {
        return uri += "?access_token=" + this.token;
      }
    };

    Client.prototype.responseHandler = function(res, body, callback) {
      var _ref;
      if (Math.floor(res.statusCode / 100) === 5) {
        return callback(new Error('Error ' + res.statusCode));
      }
      try {
        body = JSON.parse(body || '{}');
      } catch (err) {
        return callback(err);
      }
      if (body.message && res.statusCode === 422) {
        return callback(new Error(body.message));
      }
      if (body.message && ((_ref = res.statusCode) === 400 || _ref === 401 || _ref === 404)) {
        return callback(new Error(body.message));
      }
      return callback(null, res.statusCode, body);
    };

    Client.prototype.get = function(path, params, callback) {
      var _this = this;
      return request({
        uri: this.query(path),
        method: 'GET',
        qs: params
      }, function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.responseHandler(res, body, callback);
      });
    };

    Client.prototype.post = function(path, params, callback) {
      var _this = this;
      return request({
        uri: this.query(path),
        method: 'POST',
        form: params
      }, function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.responseHandler(res, body, callback);
      });
    };

    Client.prototype.del = function(path, params, callback) {
      var _this = this;
      return request({
        uri: this.query(path),
        method: 'DELETE',
        form: params
      }, function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return _this.responseHandler(res, body, callback);
      });
    };

    return Client;

  })();

  module.exports = function(token) {
    return new Client(token);
  };

}).call(this);
